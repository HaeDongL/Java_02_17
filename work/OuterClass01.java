//package jp02.part05;

	/*
		FileName : OuterClass01.java

		<<Inner Member Class>>
		1.innerMember Class는 class를 구성하는 Field,method 와 같이 Class 가 구성하는 Member가 될 수 있다.(구성요소가 될 수 있음.)
		2.사용하는 이유는 : OuterClass와 밀접한 관련
		3.컴파일후 innerClass는 어떤 형태의 class가 되는지 확인(~~~$~~~.class)
	*/



public class OuterClass01 
{

	///Field
	private String outer = "OuterClass의 Field";
	///Constructor
	public OuterClass01(){
	}

	///Method
	public void outerMethod(){
		System.out.println("::"+this.getClass().getName()+" start..");
		//innerClass에 접근할 경우 인스턴스 생성 후 접근
		InnerClass ic = new InnerClass();
		ic.innerMethod();
		System.out.println("::"+this.getClass().getName()+" end...");
	}

	///InnerMember Class
	public class InnerClass // 클래스 안에 클래스가 들어간다?????
	{
		///Field
		private String inner = "InnerClas의 Field";
		///Constructor
		public InnerClass(){

		}

		///Method
		public void innerMethod(){
			//innerClass에서 outer Class 로 접근
			//OuterClass의 Field, Method에 쉽게 접근 :: 레퍼런스 불필요.
			System.out.println("==>"+this.getClass().getName()+" start..");
			//==>OuterClass의 Field 접근 방식 :: 2가지
			System.out.println(outer); // inner클래스가 
			System.out.println(OuterClass01.this.outer); // static 접근 방식 같다
			//==>아래의 실행문을 주석 풀면 compile error가 발생한다. 이유는...
			//System.out.println(this.outer); 자신에게는 outer가 없음. 
			System.out.println(inner);
			System.out.println("==>"+this.getClass().getName()+" end..");
		}
	}
	
	public static void main(String[] args) 
	{
		new OuterClass01().outerMethod();
	}
}
